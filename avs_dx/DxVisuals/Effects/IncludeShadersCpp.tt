<#@ template language="C#" hostspecific="true" #>
<#@ output extension=".cpp" #>
<#@ assembly name="System.dll" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
// This file is automatically generated.
#include "stdafx.h"
#include "shadersCode.h"

namespace Hlsl
{<#= generateNamespaces() #>
	namespace StaticShaders
	{
		<#= makeStaticShaders() #>
	}
}<#@ include file="IncludeShaders.t4"#><#+
const int valsPerLine = 32;

static void printBytes( StringBuilder sb, byte[] data )
{
	sb.AppendLine( "\t\t{" );
	for( int i = 0; true; )
	{
		int count = Math.Min( valsPerLine, data.Length - i );
		sb.Append( "\t\t\t" );
		var values = data.Skip( i ).Take( count );
		var strings = values.Select( b => string.Format( "0x{0:X2}", b ) );
		sb.Append( string.Join( ", ", strings ) );
		i += count;
		if( i < data.Length ) 
		{
			sb.AppendLine( "," );
			continue;
		}
		break;
	}
	sb.AppendLine();
	sb.AppendLine( "\t\t};" );
}

void makeShader( StringBuilder sb, string path )
{
	byte[] data = File.ReadAllBytes( path );
	sb.AppendFormat( "const std::array<uint8_t, {0}> {1} = ", data.Length, Path.GetFileNameWithoutExtension( path ) );
	sb.AppendLine();
	printBytes( sb, data );
	Console.WriteLine( "Included a static shader from {0}", path );
}

string makeStaticShaders()
{
	StringBuilder sb = new StringBuilder();
	foreach( var path in staticShaders )
	{
		makeShader( sb, path );
		sb.AppendLine();
	}
	return sb.ToString().Trim();
}

string generateNamespaces()
{
	StringBuilder sb = new StringBuilder ();
	writeNamespaces(sb, writeNamespace );
	return sb.ToString();
}

static void writeNamespace( StringBuilder sb, NamespaceData ns, int lvl )
{
	if( ns.headers.Length > 0 )
	{
		sb.AppendLine();
		tabs( sb, lvl );
		sb.AppendFormat( "const std::array<CStringA, {0}> includes = {{", ns.headers.Length );
		foreach( string h in ns.headers )
		{
			sb.AppendLine();
			sb.AppendFormat( "// {0}", Path.GetFileName( h ) );
			sb.AppendLine();
			string content = File.ReadAllText( h, Encoding.ASCII );
			sb.AppendFormat( @"R""fffuuuu({0})fffuuuu"",", content );
		}
		sb.AppendLine("};");
	}

	if( ns.sources.Length > 0 )
	{
		foreach( string s in ns.sources )
		{
			sb.AppendLine();
			tabs( sb, lvl );
			string name = Path.GetFileNameWithoutExtension( s );
			string content = File.ReadAllText( s, Encoding.ASCII );
			sb.AppendFormat( "const CStringA {0} =", name );
			sb.AppendLine();
			sb.AppendFormat( @"R""fffuuuu({0})fffuuuu"";", content );
		}
	}
}
#>