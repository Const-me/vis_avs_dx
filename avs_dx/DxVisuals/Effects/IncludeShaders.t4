<#+
	static string[] findFiles( string inputDir, string filter, bool recursive, ref string[] found )
	{
		if( null != found )
			return found;
		SearchOption opts = recursive ? SearchOption.AllDirectories : SearchOption.TopDirectoryOnly;
		found = Directory.EnumerateFiles( inputDir, filter, opts ).ToArray();
		return found;
	}

	string sourceDir => Host.ResolveParameterValue( "", "", "SOURCE" );
	string staticBinaryDir => Host.ResolveParameterValue( "", "", "STATIC" );

	string[] s_static = null;
	string[] staticShaders => findFiles( staticBinaryDir, "*.cso", false, ref s_static );

	class NamespaceData
	{
		public readonly string name;
		public readonly string[] headers;
		public readonly string[] sources;
		public readonly NamespaceData[] children;
		public readonly NamespaceData parent;
		public readonly string fullName;

		public NamespaceData( string dir, string name = null, NamespaceData parent = null )
		{
			this.name = name;
			this.parent = parent;
			fullName = ( null == parent ) ? "Hlsl" : parent.fullName + "::" + name;
			findFiles( dir, "*.fx", false, ref headers );
			findFiles( dir, "*.hlsl", false, ref sources );
			List<NamespaceData> subs = new List<NamespaceData>();
			foreach( var sd in Directory.GetDirectories( dir ) )
			{
				var s = new NamespaceData( sd, Path.GetFileNameWithoutExtension( sd ), this );
				if( s.anyInclude || s.anySource || s.anyChild )
					subs.Add( s );
			}
			children = subs.ToArray();
		}

		public bool anyInclude => headers.Length > 0;
		public bool anySource => sources.Length > 0;
		public bool anyChild => children.Length > 0;

		public IEnumerable<NamespaceData> parents()
		{
			for( NamespaceData p = parent; null != p; p = p.parent )
				yield return p;
		}
	}

	NamespaceData s_root = null;
	NamespaceData root { get { 
		if( null == s_root )
			s_root = new NamespaceData( sourceDir );
		return s_root;
	} }

	static void tabs( StringBuilder sb, int lvl )
	{
		lvl++;
		for( int i = 0; i < lvl; i++ )
			sb.Append( '\t' );
	}

	static void writeNamespaces( CppBuilder sb, Action<CppBuilder, NamespaceData, int> act, NamespaceData ns, int lvl )
	{
		act( sb, ns, lvl );

		if( ( ns.anyInclude || ns.anySource ) && ns.anyChild )
			sb.line();

		foreach( var c in ns.children )
		{
			if( c != ns.children[ 0 ] )
				sb.line();
			sb.tabs( lvl );
			sb.line( "namespace {0}", c.name );

			sb.tabs( lvl );
			sb.line( "{" );

			writeNamespaces( sb, act, c, lvl + 1 );

			sb.tabs( lvl );
			sb.line( "}" );
		}
	}

	string writeNamespaces( Action<CppBuilder, NamespaceData, int> act )
	{
		CppBuilder sb = new CppBuilder();
		writeNamespaces( sb, act, root, 0 );
		return sb.ToString();
	}

	class CppBuilder
	{
		public readonly StringBuilder sb = new StringBuilder();
		public override string ToString() { return sb.ToString(); }

		public void line() { sb.AppendLine(); }
		public void tabs( int countMinusOne )
		{
			for( int i = 0; i <= countMinusOne; i++ )
				sb.Append( '\t' );
		}
		public void line( int tabsAfter )
		{
			line();
			tabs( tabsAfter );
		}
		public void line( string s ) { sb.AppendLine( s ); }
		public void print( string s )
		{
			sb.Append( s );
		}
		public void print( string fmt, params object[] argv )
		{
			sb.AppendFormat( fmt, argv );
		}
		public void line( string fmt, params object[] argv )
		{
			sb.AppendFormat( fmt, argv );
			sb.AppendLine();
		}
		int tt = 0;
		public void setTabs( int t )
		{
			tt = t;
		}
		public void incTabs(){ tt++; }
		public void decTabs(){ tt--; }
		public void tl( string l )
		{
			tabs( tt ); line( l );
		}
		public void tl( string l, params object[] argv )
		{
			tabs( tt ); line( l, argv );
		}
	}

	static bool isStateTemplate( string p )
	{
		return p.ToLowerInvariant().EndsWith( "state.hlsl" );
	}

	static string templateResultType( string p )
	{
		return isStateTemplate( p ) ? "StateShaderTemplate" : "ShaderTemplate";
	}

	static string pluralString( int count, string single )
	{
		return ( 1 == count ) ? $"{count} {single}": $"{count} {single}s";
	}

	static string relativePath( string pathBase, string pathAbs )
	{
		Uri uBase = new Uri( pathBase );
		Uri uAbs = new Uri( pathAbs );
		return uBase.MakeRelativeUri( uAbs ).ToString();
	}
#>