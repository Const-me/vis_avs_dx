<#@ template language="C#" #>
<#@ output extension=".cpp" #>
<#@ assembly name="System.dll" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
#pragma once
// This file is automatically generated.
#include "stdafx.h"
#include "KernelValues.h"

<#= kernel( "smallBlurKernel", 1 ) #>

<#= kernel( "mediumBlurKernel", 3 ) #>

<#= kernel( "largeBlurKernel", 9 ) #><#+
	static double gaussian( double x, double sigma )
	{
		double xx = x / sigma;
		return Math.Exp( -0.5 * xx * xx );
	}

	static string print( double val )
	{
		return val.ToString( System.Globalization.CultureInfo.InvariantCulture );
	}

	static string kernelValues( uint radius )
	{
		double[] kernel = new double[ radius + 1 ];
		double s = radius / 2.0;
		for( uint i = 0; i <= radius; i++ )
			kernel[ i ] = gaussian( i, s );
		double sum = 0;
		// We output half of the kernel (the first value being the center), however we need the complete one to be normalized. Summing from the end for improved accuracy.
		for( uint i = radius; i > 0; i-- )
			sum += 2 * kernel[ i ];
		sum += kernel[ 0 ];
		double mul = 1.0 / sum;
		return String.Join( ", ", kernel.Select( v => print( v * mul ) ) );
	}

	static string kernel( string name, uint radius )
	{
		uint diameter = radius * 2 + 1;
		return string.Format( @"// {0}x{0} blur
const ConvolutionKernel {1}{{ {2}, ""{3}"" }};",
			diameter, name, radius + 1, kernelValues( radius ) );
	}
#>