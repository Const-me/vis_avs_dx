<#@ template language="C#" hostspecific="true" #>
<#@ output extension=".h" #>
<#@ assembly name="System.dll" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
#pragma once
// This file is automatically generated.

namespace Hlsl
{<#= writeNamespaces( generateNamespace ) #>
	namespace StaticShaders
	{
<# foreach( string cso in staticShaders ) {
	   string name = Path.GetFileNameWithoutExtension( cso );
#>		const std::vector<uint8_t>& <#= name #>();
<# } #>
	}
}<#@ include file="IncludeShaders.t4"#><#+

static void generateNamespace( CppBuilder sb, NamespaceData ns, int lvl )
{
	if( ns.headers.Length > 0 )
	{
		sb.line( lvl );
		sb.line( "const CAtlMap<CStringA, CStringA>& includes();" );
	}

	if( ns.sources.Length > 0 )
	{
		foreach( string s in ns.sources )
		{
			sb.line( lvl );
			sb.print( "const CStringA& {0}();", Path.GetFileNameWithoutExtension( s ) );
		}
	}
}
#>