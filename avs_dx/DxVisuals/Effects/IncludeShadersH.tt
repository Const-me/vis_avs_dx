<#@ template language="C#" hostspecific="true" #>
<#@ output extension=".h" #>
<#@ assembly name="System.dll" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
#pragma once
// This file is automatically generated.

namespace Hlsl
{<#= generateNamespaces() #>
	namespace StaticShaders
	{
<# foreach( string cso in staticShaders ) {
	   byte[] data = File.ReadAllBytes( cso );
	   string name = Path.GetFileNameWithoutExtension( cso );
#>		extern const std::array<uint8_t, <#= data.Length #>> <#= name #>;
<# } #>
	}
}<#@ include file="IncludeShaders.t4"#><#+

static void writeNamespace( StringBuilder sb, NamespaceData ns, int lvl )
{
	if( ns.headers.Length > 0 )
	{
		sb.AppendLine();
		tabs( sb, lvl );
		sb.AppendFormat( "extern const std::array<CStringA, {0}> includes;", ns.headers.Length );
	}

	if( ns.sources.Length > 0 )
	{
		foreach( string s in ns.sources )
		{
			sb.AppendLine();
			tabs( sb, lvl );
			sb.AppendFormat( "extern const CStringA {0};", Path.GetFileNameWithoutExtension( s ) );
		}
	}
}

string generateNamespaces()
{
	StringBuilder sb = new StringBuilder ();
	writeNamespaces(sb, writeNamespace );
	return sb.ToString();
}
#>